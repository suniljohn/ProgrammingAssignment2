## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_list <- list.files(directory, full.names = T)
dat <- data.frame()
dat2 <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
dat2 <- rbind(dat2, data.frame("id" = id, nobs = sum(complete.cases(dat))))
}
dat2
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:2) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_list <- list.files(directory, full.names = T)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
sum(length(dat$id))
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:2) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_list <- list.files(directory, full.names = T)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
length(dat)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:2) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_list <- list.files(directory, full.names = T)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
length(dat,)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:2) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_list <- list.files(directory, full.names = T)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
length(dat[id,])
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:2) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files_list <- list.files(directory, full.names = T)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat[id,]
}
complete("specdata", c(2, 4, 8, 10, 12))
complete2 <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=TRUE)   #creates a list of files
nobs <- c();
for (index in id) {
file_data <- read.csv(files[index], sep = ",");
complete_cases <- file_data[complete.cases(file_data),];
nobs <- c(nobs, nrow(complete_cases));
}
return(data.frame(cbind(id, nobs)));
}
complete2("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
files <- list.files(directory, full.names=T)   #creates a list of files
nobs <- c();
for (i in id) {
dat <- read.csv(files[i], sep = ",");
complete_cases <- dat[complete.cases(dat),];
nobs <- c(nobs, nrow(complete_cases));
}
return(data.frame(cbind(id, nobs)));
}
complete("specdata", c(2, 4, 8, 10, 12))
View(complete2)
View(complete2)
View(complete2)
View(complete2)
View(complete2)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("complete.R")
complete("specdata", 1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
View(pollutantmean)
View(pollutantmean)
?na.rm
?na
View(complete)
View(complete)
View(complete)
View(complete)
View(complete)
View(complete)
View(complete)
View(complete)
View(complete)
View(complete)
function(directory, id = 1:332) {
files <- list.files(directory, full.names=T)   #creates a list of files
nobs <- c();
for (i in id) {
dat <- read.csv(files[i], sep = ",");
nobs <- c(nobs, nrow(dat[complete.cases(dat),]));
}
return(data.frame(cbind(id, nobs)));
}
complete("specdata", 30:25)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
View(complete)
View(complete)
View(complete)
View(complete)
View(pollutantmean)
View(pollutantmean)
head(read.csv("specdata/1", sep = ","))
head(read.csv("specdata/1.csv", sep = ","))
head(read.csv("/specdata/1.csv", sep = ","))
View(pollutantmean)
View(pollutantmean)
head(read.csv("specdata/1.csv", sep = ","))
read.csv("specdata/1.csv", sep = ",")
getwd()
list.files("("specdata"")
list.files("specdata)
)
")"
quit()
list.files("specdata")
read.csv("specdata/332.csv", sep = ",")
read.csv("specdata/332.csv")
View(complete2)
View(complete)
read.csv("123.csv", sep = ",")
read.csv("specdata/123.csv", sep = ",")
dat <- read.csv("specdata/123.csv", sep = ",")
nrow(complete.cases(dat))
dat <- read.csv("specdata/*.csv", sep = ",")
dat <- read.csv("specdata//*.csv", sep = ",")
dat <- read.csv("specdata/*.*", sep = ",")
files <- list.files("specdata", full.names=T)   #creates a list of files
for (i in id) {
dat <- read.csv(files[i], sep = ",")
}
files <- list.files("specdata", full.names=T)   #creates a list of files
for (i in id) {
dat <- read.csv(files[i], sep = ",")
}
files <- list.files("specdata", full.names=T)   #creates a list of files
for (i in 1:300) {
dat <- read.csv(files[i], sep = ",")
}
files <- list.files("specdata", full.names=T)   #creates a list of files
for (i in 1:300) {
dat <- read.csv(files[i], sep = ",")
}
dat
nrow(complete.cases(dat))
nrow(dat)
dat[complete.cases(dat),]
nrow(dat[complete.cases(dat),])
complete.cases(dat$sulfate)]
complete.cases(dat$sulfate)
completecases <- dat[complete.cases(dat),]
nrow(completecases)
cor(completecases$sulfate, completecases$nitrate)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
files <- list.files(directory, full.names=T)   #creates a list of files
completecases <- c()
correlation <- ()
for (i in id) {
dat <- read.csv(files[i], sep = ",")
completecases <- dat[complete.cases(dat),]
if (nrow(completecases) > threshold) {
correlation <- c(correlation, cor(completecases$sulfate, completecases$nitrate))
}
}
return(correlation)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
files <- list.files(directory, full.names=T)   #creates a list of files
completecases <- c()
correlation <- ()
for (file in files) {
dat <- read.csv(files[i], sep = ",")
completecases <- dat[complete.cases(dat),]
if (nrow(completecases) > threshold) {
correlation <- c(correlation, cor(completecases$sulfate, completecases$nitrate))
}
}
return(correlation)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
files <- list.files(directory, full.names=T)   #creates a list of files
completecases <- c()
correlation <- c()
for (file in files) {
dat <- read.csv(files[i], sep = ",")
completecases <- dat[complete.cases(dat),]
if (nrow(completecases) > threshold) {
correlation <- c(correlation, cor(completecases$sulfate, completecases$nitrate))
}
}
return(correlation)
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr("specdata", 150)
corr2("specdata", 150)
corr2("specdata", 150)
corr2 <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Returns a numeric vector of correlations
files <- (Sys.glob("specdata//*.csv"));
correlations <- c()
for (file in files) {
file_data <- read.csv(file, sep = ",");
complete_cases <- file_data[complete.cases(file_data),];
if (nrow(complete_cases) > threshold) {
correlations <- c(correlations, cor(complete_cases$sulfate, complete_cases$nitrate))
}
}
return(correlations)
}
corr2("specdata", 150)
summary(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
files <- list.files(directory, full.names=T)   #creates a list of files
completecases <- c()
correlation <- c()
for (file in files) {
dat <- read.csv(files[i], sep = ",")
completecases <- dat[complete.cases(dat),]
if (nrow(completecases) > threshold) {
correlation <- c(correlation, cor(completecases$nitrate, completecases$sulfate))
}
}
return(correlation)
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
corr("specdata", 150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
files <- list.files(directory, full.names=T)   #creates a list of files
completecases <- c()
correlation <- c()
for (file in files) {
dat <- read.csv(files[files], sep = ",")
completecases <- dat[complete.cases(dat),]
if (nrow(completecases) > threshold) {
correlation <- c(correlation, cor(completecases$nitrate, completecases$sulfate))
}
}
return(correlation)
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
files <- list.files(directory, full.names=T)   #creates a list of files
completecases <- c()
correlation <- c()
for (file in files) {
dat <- read.csv(files[file], sep = ",")
completecases <- dat[complete.cases(dat),]
if (nrow(completecases) > threshold) {
correlation <- c(correlation, cor(completecases$nitrate, completecases$sulfate))
}
}
return(correlation)
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
list.files()
corr("specdata", 150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
View(corr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files <- list.files(directory, full.names=T)   #creates a list of files
nobs <- c()
for (i in id) {
dat <- read.csv(files[i], sep = ",")
nobs <- c(nobs, nrow(dat[complete.cases(dat),]))
}
return(data.frame(cbind(id, nobs)))
}
submit()
submit()
submit()
submit()
submit()
source("complete.R")
complete("specdata", 1)
submit()
submit()
submit()
source("makecachematrix.R")
source("cacheSolve.R")
setwd("/Users/suniljohn/Documents/ProgrammingAssignment2/")
source("makecachematrix.R")
source("cacheSolve.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
source("makecachematrix.R")
source("cacheSolve.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
